[{"/home/prakashagrahari/Desktop/job-portal/src/index.js":"1","/home/prakashagrahari/Desktop/job-portal/src/App.js":"2","/home/prakashagrahari/Desktop/job-portal/src/serviceWorker.js":"3","/home/prakashagrahari/Desktop/job-portal/src/store/reducer.js":"4","/home/prakashagrahari/Desktop/job-portal/src/components/common/Snackbar/Snackbar.tsx":"5","/home/prakashagrahari/Desktop/job-portal/src/components/common/PrivateRoutes/PrivateRoutes.js":"6","/home/prakashagrahari/Desktop/job-portal/src/store/utility.js":"7","/home/prakashagrahari/Desktop/job-portal/src/store/actionTypes.js":"8","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/HomeScreen.tsx":"9","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/LoginScreen/Login/Login.tsx":"10","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/LoginScreen/Register/Register.tsx":"11","/home/prakashagrahari/Desktop/job-portal/src/store/action.js":"12","/home/prakashagrahari/Desktop/job-portal/src/utils/public.api.helper.js":"13","/home/prakashagrahari/Desktop/job-portal/src/utils/constant.ts":"14","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Navigation/Navigation.tsx":"15","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Main.tsx":"16","/home/prakashagrahari/Desktop/job-portal/src/utils/api.js":"17","/home/prakashagrahari/Desktop/job-portal/src/components/common/Modal/Modal.tsx":"18","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Candidate/Candidate.tsx":"19","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Candidate/AlreadyAppliedJobs/AlreadyAppliedJobs.tsx":"20","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Recruiter/Recruiter.tsx":"21","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Recruiter/PostNewJob/PostNewJob.tsx":"22","/home/prakashagrahari/Desktop/job-portal/src/utils/private.api.helper.js":"23","/home/prakashagrahari/Desktop/job-portal/src/components/common/JobDetail/JobDetail.tsx":"24"},{"size":998,"mtime":1610203324000,"results":"25","hashOfConfig":"26"},{"size":884,"mtime":1610203324000,"results":"27","hashOfConfig":"26"},{"size":5239,"mtime":1610203324000,"results":"28","hashOfConfig":"26"},{"size":628,"mtime":1610203324000,"results":"29","hashOfConfig":"26"},{"size":1364,"mtime":1610203324000,"results":"30","hashOfConfig":"26"},{"size":403,"mtime":1610203324000,"results":"31","hashOfConfig":"26"},{"size":125,"mtime":1610203324000,"results":"32","hashOfConfig":"26"},{"size":94,"mtime":1610203324000,"results":"33","hashOfConfig":"26"},{"size":285,"mtime":1610203324000,"results":"34","hashOfConfig":"26"},{"size":3503,"mtime":1610204534000,"results":"35","hashOfConfig":"26"},{"size":5865,"mtime":1610203324000,"results":"36","hashOfConfig":"26"},{"size":279,"mtime":1610203324000,"results":"37","hashOfConfig":"26"},{"size":486,"mtime":1610203324000,"results":"38","hashOfConfig":"26"},{"size":188,"mtime":1610203324000,"results":"39","hashOfConfig":"26"},{"size":3937,"mtime":1610204774000,"results":"40","hashOfConfig":"26"},{"size":593,"mtime":1610203324000,"results":"41","hashOfConfig":"26"},{"size":841,"mtime":1610203324000,"results":"42","hashOfConfig":"26"},{"size":1050,"mtime":1610203324000,"results":"43","hashOfConfig":"26"},{"size":2617,"mtime":1610204204000,"results":"44","hashOfConfig":"26"},{"size":2265,"mtime":1610204150000,"results":"45","hashOfConfig":"26"},{"size":4758,"mtime":1610203324000,"results":"46","hashOfConfig":"26"},{"size":3243,"mtime":1610203324000,"results":"47","hashOfConfig":"26"},{"size":1807,"mtime":1610203324000,"results":"48","hashOfConfig":"26"},{"size":1416,"mtime":1610203324000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"w9r5a",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"61"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"61"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},"/home/prakashagrahari/Desktop/job-portal/src/index.js",[],["104","105"],"/home/prakashagrahari/Desktop/job-portal/src/App.js",[],"/home/prakashagrahari/Desktop/job-portal/src/serviceWorker.js",[],"/home/prakashagrahari/Desktop/job-portal/src/store/reducer.js",[],"/home/prakashagrahari/Desktop/job-portal/src/components/common/Snackbar/Snackbar.tsx",[],["106","107"],"/home/prakashagrahari/Desktop/job-portal/src/components/common/PrivateRoutes/PrivateRoutes.js",[],"/home/prakashagrahari/Desktop/job-portal/src/store/utility.js",[],"/home/prakashagrahari/Desktop/job-portal/src/store/actionTypes.js",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/HomeScreen.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/LoginScreen/Login/Login.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/LoginScreen/Register/Register.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/store/action.js",[],"/home/prakashagrahari/Desktop/job-portal/src/utils/public.api.helper.js",[],"/home/prakashagrahari/Desktop/job-portal/src/utils/constant.ts",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Navigation/Navigation.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Main.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/utils/api.js",[],"/home/prakashagrahari/Desktop/job-portal/src/components/common/Modal/Modal.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Candidate/Candidate.tsx",["108"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getAvailableJobList,\r\n  applyCandidateJob,\r\n} from \"../../../../../utils/private.api.helper\";\r\nimport { JobDetailInterface } from \"../../../../../utils/constant\";\r\nimport * as actions from \"../../../../../store/action\";\r\n\r\nconst Candidate = (props: any) => {\r\n  const [jobList, setJobList] = useState([]);\r\n\r\n  const getJobListing = async () => {\r\n    const res = await getAvailableJobList();\r\n    if (res.success) {\r\n      setJobList(res.data);\r\n    } else {\r\n      setJobList([]);\r\n      props.setSnackbarState({\r\n        mode: \"error\",\r\n        message: \"Available Job fetching failed.\",\r\n        state: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobListing();\r\n  }, []);\r\n\r\n  const handleApplyJob = async (jobId: string) => {\r\n    const params = {\r\n      jobId,\r\n    };\r\n    await applyCandidateJob(params);\r\n  };\r\n\r\n  return (\r\n    <div className=\"my-3 p-3 bg-white rounded shadow-sm\">\r\n      {jobList.length ? (\r\n        <Fragment>\r\n          <h6 className=\"border-bottom border-gray pb-2 mb-0\">\r\n          Jobs for you\r\n          </h6>\r\n          {jobList.map((jobDetail: JobDetailInterface) => {\r\n            return (\r\n              <div className=\"media text-muted pt-3\" key={jobDetail.id}>\r\n                <div className=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\">\r\n                  <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n                    <strong className=\"text-gray-dark\">\r\n                      {jobDetail.title.toUpperCase()}\r\n                    </strong>\r\n                    <div\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => handleApplyJob(jobDetail.id)}\r\n                    >\r\n                      Apply\r\n                    </div>\r\n                  </div>\r\n                  <span className=\"d-block\">\r\n                    Location : {jobDetail.location}\r\n                  </span>\r\n                  <span className=\"d-block\">\r\n                    Description : {jobDetail.description}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </Fragment>\r\n      ) : (\r\n        <h6 className=\" pb-2 mb-0\">No Job Available</h6>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    setSnackbarState: (snackbarObj: any) =>\r\n      dispatch(actions.setSnackbarState(snackbarObj)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Candidate);\r\n","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Candidate/AlreadyAppliedJobs/AlreadyAppliedJobs.tsx",["109"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../../../../../store/action\";\r\n\r\nimport { getCandidateAlreadyAppliedJobList } from \"../../../../../../utils/private.api.helper\";\r\nimport { JobDetailInterface } from \"../../../../../../utils/constant\";\r\n\r\nconst AlreadyAppliedJobs = (props: any) => {\r\n  const [jobList, setJobList] = useState([]);\r\n\r\n  const getAppliedJobListing = async () => {\r\n    const res = await getCandidateAlreadyAppliedJobList();\r\n    if (res.success) {\r\n      setJobList(res.data);\r\n    } else {\r\n      setJobList([]);\r\n      props.setSnackbarState({\r\n        mode: \"error\",\r\n        message: \"Already applied job list fetching failed.\",\r\n        state: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAppliedJobListing();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <h6 className=\"border-bottom border-gray pb-2 mb-0\">\r\n        Jobs Applied by you\r\n      </h6>\r\n      <div className=\"my-3 p-3 bg-white rounded shadow-sm overflow-auto\">\r\n        {jobList.length\r\n          ? jobList.map((jobDetail: JobDetailInterface) => {\r\n              return (\r\n                <div className=\"media text-muted pt-3\" key={jobDetail.id}>\r\n                  <div className=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\">\r\n                    <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n                      <strong className=\"text-gray-dark\">\r\n                        {jobDetail.title}\r\n                      </strong>\r\n                    </div>\r\n                    <span className=\"d-block\">\r\n                      Location : {jobDetail.location}\r\n                    </span>\r\n                    <span className=\"d-block\">\r\n                      Description : {jobDetail.description}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    setSnackbarState: (snackbarObj: any) =>\r\n      dispatch(actions.setSnackbarState(snackbarObj)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AlreadyAppliedJobs);\r\n","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Recruiter/Recruiter.tsx",["110"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getRecruiterPostedJobList,\r\n  deleteJob,\r\n} from \"../../../../../utils/private.api.helper\";\r\nimport { JobDetailInterface } from \"../../../../../utils/constant\";\r\nimport JobDetail from \"../../../../../components/common/JobDetail/JobDetail\";\r\nimport Modal from \"../../../../../components/common/Modal/Modal\";\r\nimport * as actions from \"../../../../../store/action\";\r\n\r\nconst Recruiter = (props: any) => {\r\n  const [jobList, setJobList] = useState([]);\r\n  const [selectedJobId, setSelectedJobId] = useState(\"\");\r\n\r\n  const [modalState, setModalState] = useState(false);\r\n\r\n  const getJobListing = async () => {\r\n    const res = await getRecruiterPostedJobList();\r\n    if (res.success) {\r\n      if (res.data && res.data.data.length) {\r\n        setJobList(res.data.data);\r\n      } else {\r\n        setJobList([]);\r\n      }\r\n    } else {\r\n      setJobList([]);\r\n      props.setSnackbarState({\r\n        mode: \"error\",\r\n        message: \"Recruiter posted job list fetching failed.\",\r\n        state: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobListing();\r\n  }, []);\r\n\r\n  const handleDeleteJob = async (jobId: string) => {\r\n    const params = {\r\n      jobId,\r\n    };\r\n    await deleteJob(params);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"my-3 p-3 bg-white rounded shadow-sm\">\r\n        {jobList.length ? (\r\n          <Fragment>\r\n            <h6 className=\"border-bottom border-gray pb-2 mb-0\">Posted Jobs</h6>\r\n            {jobList.map((jobDetail: JobDetailInterface) => {\r\n              return (\r\n                <div className=\"media text-muted pt-3\" key={jobDetail.id}>\r\n                  <div className=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\">\r\n                    <div className=\"d-flex justify-content-between align-items-center w-100\">\r\n                      <strong\r\n                        className=\"text-gray-dark clickable\"\r\n                        onClick={() => {\r\n                          setSelectedJobId(jobDetail.id);\r\n                          setModalState(true);\r\n                        }}\r\n                      >\r\n                        {jobDetail.title}\r\n                      </strong>\r\n                      <div className=\"dropdown\">\r\n                        <IconButton\r\n                          type=\"button\"\r\n                          id=\"dropdownMenuButton\"\r\n                          data-toggle=\"dropdown\"\r\n                          aria-haspopup=\"true\"\r\n                          aria-expanded=\"false\"\r\n                        >\r\n                          <MoreVertIcon />\r\n                        </IconButton>\r\n                        <div\r\n                          className=\"dropdown-menu dropdown-menu-right\"\r\n                          aria-labelledby=\"dropdownMenuButton\"\r\n                        >\r\n                          <div\r\n                            style={{ cursor: \"pointer\" }}\r\n                            className=\"dropdown-item\"\r\n                            onClick={() => {\r\n                              setSelectedJobId(jobDetail.id);\r\n                              setModalState(true);\r\n                            }}\r\n                          >\r\n                            View Job Details\r\n                          </div>\r\n                          <div\r\n                            style={{ cursor: \"pointer\" }}\r\n                            className=\"dropdown-item\"\r\n                            onClick={() => handleDeleteJob(jobDetail.id)}\r\n                          >\r\n                            Delete Job\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <span className=\"d-block\">\r\n                      Location : {jobDetail.location}\r\n                    </span>\r\n                    <span className=\"d-block\">\r\n                      Description : {jobDetail.description}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </Fragment>\r\n        ) : (\r\n          <h6 className=\"pb-2 mb-0\">No Job Posted</h6>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={modalState} onClose={() => setModalState(false)}>\r\n        <JobDetail jobId={selectedJobId} />\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    setSnackbarState: (snackbarObj: any) =>\r\n      dispatch(actions.setSnackbarState(snackbarObj)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Recruiter);\r\n","/home/prakashagrahari/Desktop/job-portal/src/containers/screens/HomeScreen/Main/Recruiter/PostNewJob/PostNewJob.tsx",[],"/home/prakashagrahari/Desktop/job-portal/src/utils/private.api.helper.js",[],"/home/prakashagrahari/Desktop/job-portal/src/components/common/JobDetail/JobDetail.tsx",["111"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { getJobDetail } from \"../../../utils/private.api.helper\";\r\nimport * as actions from \"../../../store/action\";\r\n\r\nconst JobDetail = (props: any) => {\r\n  const [jobDetail, setJobDetail] = useState({\r\n    title: \"\",\r\n    location: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  const handleJobDetail = async () => {\r\n    const jobId: string = props.jobId;\r\n    const res = await getJobDetail(jobId);\r\n    if (res.success) {\r\n      setJobDetail(res.data);\r\n    } else {\r\n      setJobDetail({ title: \"\", location: \"\", description: \"\" });\r\n      props.setSnackbarState({\r\n        mode: \"error\",\r\n        message: \"Job detail fetching failed.\",\r\n        state: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleJobDetail();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"card\" style={{ width: \"18rem\" }}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{jobDetail.title}</h5>\r\n        <h6 className=\"card-subtitle mb-2 text-muted\">{jobDetail.location}</h6>\r\n        <p className=\"card-text\">{jobDetail.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    setSnackbarState: (snackbarObj: any) =>\r\n      dispatch(actions.setSnackbarState(snackbarObj)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(JobDetail);\r\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":30,"column":6,"nodeType":"118","endLine":30,"endColumn":8,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":27,"column":6,"nodeType":"118","endLine":27,"endColumn":8,"suggestions":"121"},{"ruleId":"116","severity":1,"message":"117","line":41,"column":6,"nodeType":"118","endLine":41,"endColumn":8,"suggestions":"122"},{"ruleId":"116","severity":1,"message":"123","line":31,"column":6,"nodeType":"118","endLine":31,"endColumn":8,"suggestions":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getJobListing'. Either include it or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has a missing dependency: 'getAppliedJobListing'. Either include it or remove the dependency array.",["128"],["129"],"React Hook useEffect has a missing dependency: 'handleJobDetail'. Either include it or remove the dependency array.",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"131","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [getJobListing]",{"range":"138","text":"139"},"Update the dependencies array to be: [getAppliedJobListing]",{"range":"140","text":"141"},{"range":"142","text":"139"},"Update the dependencies array to be: [handleJobDetail]",{"range":"143","text":"144"},[805,807],"[getJobListing]",[849,851],"[getAppliedJobListing]",[1301,1303],[830,832],"[handleJobDetail]"]